@page
@model VideoPlayerModel
@{
}

    <h1>YouTube Remote Video Player</h1>
    <br>
    Status: <Div id="lblStatus">Desconectado</Div>

    <br>
    ID: <input id="txtId" type="text"/> <button id="btnLoadId" onclick="loadVideoById()">Load ID</button>
    <br>
    Goto: <input id="txtGotoSecond" type="number" values="0"/> seconds <button id="BtnGotoSecond" onclick="seekTo()">Goto</button>
    <br>
    <br>
    <br>
        <button id="btnPlay" onclick="playVideo()">Play</button>
        <button id="btnPause" onclick="pauseVideo()">Pause</button>
        <button id="btnStop" onclick="stopVideo()">Stop</button>
        <button id="btnMute" onclick="mute()">Mute</button>
        <button id="btnUnMute" onclick="unMute()">UnMute</button>
    <br>

    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player">Player</div>
    <br>
      <p><span id="current-time">0:00</span></p>
      <input type="range" id="progress-bar" value="0"/>
      <p><span id="duration">0:00</span></p>
    <br>
   
@section Scripts {
      <script src="/lib/signalr/signalr.js"></script>

      <script type="text/javascript">

      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');
      var txtId = document.getElementById('txtId');
      var txtGotoSecond = document.getElementById('txtGotoSecond');
      var lblStatus = document.getElementById('lblStatus');
      var time_update_interval = 0;
      var progressBar = document.getElementById('progress-bar');
      var currentTime = document.getElementById('current-time');
      var mouseDown = false;

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '360',
          width: '640',
          videoId: '',
          controls:0,
          disablekb:1,
          autoplay:1,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {

        // Update the controls on load
        updateTimerDisplay();
        updateProgressBar();

        // Clear any old interval.
        clearInterval(time_update_interval);

        // Start interval to update elapsed time display and
        // the elapsed part of the progress bar every second.
        time_update_interval = setInterval(function () {
            updateTimerDisplay();
            updateProgressBar();
        }, 1000)

      }

      
      progressBar.addEventListener("input", function() {
          currentTime.innerHTML =  formatTime( player.getDuration() * (progressBar.value / 100)  )
      }, false); 

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
          /*
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
        */
      }

      //faz a conexao com o hub do video player
      var connection = new signalR.HubConnection("/hubs/VideoPlayer");

      connection.start().then(function() {
        console.log('conectado');
        lblStatus.innerHTML = "Conectado";
      });
      
    //   connection.send("SendplayVideo",message,name);
    function playVideo() {
      console.log('playVideo');
      connection.send("playVideo");
      player.playVideo();
    }

    function stopVideo() {
      console.log('stopVideo');
      connection.send("stopVideo");
      player.stopVideo();
    }

    function pauseVideo() {
      console.log('pauseVideo');
      connection.send("pauseVideo");
      player.pauseVideo();
    }

    
    function loadVideoById() {
        console.log('loadVideoById');
        var mediaContentID = txtId.value;
        var startSeconds = txtGotoSecond.value;
        connection.send("loadVideoById",mediaContentID, startSeconds);
        player.loadVideoById(mediaContentID, startSeconds);
    }

    function seekTo() {
      console.log('seekTo');
      var seconds = txtGotoSecond.value;
      var allowSeekAhead = true;
      connection.send("seekTo",seconds);
      player.seekTo(seconds,allowSeekAhead);
    }

    function mute() {
      console.log('mute');
      connection.send("mute");
      player.mute();
    }

    function unMute() {
      console.log('unMute');
      connection.send("unMute");
      player.unMute();
    }

    function setVolume() {
         //var volume = 0;
         //connection.send("setVolume",volume);
         //player.setVolume(volume);
    }


    function setSize() {
          //var width = 0;
          //var height = 0;
          //connection.send("SendsetSize",width, height);
          //player.setSize(width, height);
    }


    // This function is called by initialize()
    function updateTimerDisplay(){

        if (!mouseDown)
        {
          // Update current time text display.
          $('#current-time').text(formatTime( player.getCurrentTime() ));
          $('#duration').text(formatTime( player.getDuration() ));
        }
    }

    function formatTime(time){
        time = Math.round(time);

        var minutes = Math.floor(time / 60),
        seconds = time - minutes * 60;

        seconds = seconds < 10 ? '0' + seconds : seconds;

        return minutes + ":" + seconds;
    }

    
    $('#progress-bar').on('mouseup touchend', function (e) {
         mouseDown = false;
        // Calculate the new time for the video.
        // new time in seconds = total duration in seconds * ( value of range input / 100 )
        var seconds = player.getDuration() * (e.target.value / 100);

        // Skip video to new time.
        var allowSeekAhead = true;
        connection.send("seekTo",seconds);
        player.seekTo(seconds,allowSeekAhead);
    });



     $('#progress-bar').mousedown(function (e) {
       console.log('mousedown');
        mouseDown = true;
        player.pauseVideo();
    });

     $('#progress-bar').mouseup(function (e) {
        console.log('mouseup');
        mouseDown = true;
        player.playVideo();
    });

    // This function is called by initialize()
    function updateProgressBar(){
        // Update the value of our progress bar accordingly.
        $('#progress-bar').val((player.getCurrentTime() / player.getDuration()) * 100);
    }

    connection.on("SendloadVideoById", function (mediaContentID,startSeconds) {
        console.log('SendloadVideoById');
        console.log('mediaContentID:'+mediaContentID);
        console.log('startSeconds:'+startSeconds);

        txtId.value =  mediaContentID;
        txtGotoSecond.value = startSeconds;
        player.loadVideoById(mediaContentID, startSeconds);
    });

    connection.on("SendseekTo", function (seconds) {
        console.log('SendseekTo');
        txtGotoSecond.value = seconds;
        var allowSeekAhead = true;
        player.seekTo(seconds,allowSeekAhead);
    });

    connection.on("SendplayVideo", function () {
      console.log('SendplayVideo');
      player.playVideo();
    });

    connection.on("SendpauseVideo", function () {
      console.log('SendpauseVideo');
      player.pauseVideo();
    });

    connection.on("SendstopVideo", function () {
      console.log('SendstopVideo');
      player.stopVideo();
    });

    connection.on("Sendmute", function () {
      console.log('Sendmute');
      player.mute();
    });

    connection.on("SendunMute", function () {
      console.log('SendunMute');
      player.unMute();
    });
    </script>
}    